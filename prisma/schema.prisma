generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

model User {
  id           String        @id @default(uuid()) @db.Uuid()
  name         String?       @db.VarChar()
  email        String?       @unique @db.VarChar()
  phone        String?       @unique @db.VarChar()
  password     String?       @db.VarChar()
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  categories   Category[]
  budgets      Budget[]
}

model Category {
  id           String        @id @default(uuid()) @db.Uuid()
  name         String?       @db.VarChar()
  slug         String?       @unique @db.VarChar()
  type         String?       @db.VarChar(20) // EXPENSE, INCOME
  emoji        String?       @db.VarChar(20)
  description  String?       @db.Text()
  active       Boolean       @default(true)
  transactions Transaction[]
  user         User          @relation(fields: [userId], references: [id])
  userId       String        @db.Uuid()
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  budgets      Budget[]

  @@index([userId])
  @@index([slug])
  @@index([userId, slug])
}

model Currency {
  id           String        @id @default(uuid()) @db.Uuid()
  name         String        @db.VarChar()
  code         String        @unique @db.VarChar(20)
  symbol       String?       @db.VarChar(20)
  transactions Transaction[]
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  budgets      Budget[]

  @@index([code])
}

model Transaction {
  id          String    @id @default(uuid()) @db.Uuid()
  amount      Float
  currency    Currency? @relation(fields: [currencyId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  currencyId  String?   @db.Uuid()
  date        DateTime? @default(now()) @db.Date
  user        User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  userId      String?   @db.Uuid()
  category    Category? @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: SetNull)
  categoryId  String?   @db.Uuid()
  description String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@index(currencyId)
  @@index(userId)
  @@index(categoryId)
  @@index(date)
  @@index(description)
  @@index([currencyId, userId, categoryId, date, description])
}

model Budget {
  id            String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid() 
  year          Int
  budgetBasis   String?   @default("MONTHLY") @db.VarChar(10) // MONTHLY, YEARLY
  monthlyBudget Float     @default(0)
  yearlyBudget  Float     @default(0)
  currency      Currency? @relation(fields: [currencyId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  currencyId    String?   @db.Uuid()
  category      Category? @relation(fields: [categoryId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  categoryId    String?   @db.Uuid()
  user          User?     @relation(fields: [userId], references: [id], onUpdate: Cascade, onDelete: Restrict)
  userId        String?   @db.Uuid()

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([year, currencyId, categoryId, userId])
  @@index([userId])
  @@index([year, currencyId, categoryId, userId])
}
